{"ast":null,"code":"var _jsxFileName = \"/Users/amrnazeh/Documents/unvierstiy /Final_year/final/my-web3-ai-app/client/src/pages/SaveUserData.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport UserDataStorageAbi from '../abis/UserDataStorage.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SaveUserData() {\n  _s();\n  const [name, setName] = useState('');\n  const [userAddress, setUserAddress] = useState('');\n  const [location, setLocation] = useState('');\n  const [status, setStatus] = useState('');\n  const [provider, setProvider] = useState(null);\n  const contractAddress = '0x4a8958c6D1fdf3681A4f527Da19B5EFF7Cd79691';\n  async function saveDataToBlockchain() {\n    let localProvider = null;\n    const log = `Name: ${name}, Address: ${userAddress}, Location: ${location}`;\n    setStatus('Analyzing data with AI...');\n    try {\n      // First check if MetaMask is installed and connected\n      if (!window.ethereum) {\n        alert('Please install MetaMask to use this feature!');\n        setStatus('');\n        return;\n      }\n\n      // Request account access if needed\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n      } catch (error) {\n        alert('Please connect your MetaMask wallet!');\n        setStatus('');\n        return;\n      }\n      const response = await fetch('http://localhost:5002/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          data: log,\n          name: name,\n          address: userAddress,\n          location: location\n        })\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        let errorMessage = 'Error analyzing data.';\n        if (result.attack_type === 'XSS') {\n          errorMessage = `Security risk detected in ${result.field}: ${result.reason}\\n\\nSuggestions:\\n${result.suggestions.join('\\n')}`;\n        } else if (result.attack_type === 'Blockchain Anomaly') {\n          errorMessage = `Suspicious transaction pattern detected (Risk Level: ${result.risk_level})`;\n        }\n        alert(errorMessage);\n        setStatus('');\n        return;\n      }\n      console.log('AI Prediction:', result);\n      if (result.prediction.toLowerCase() === 'attack') {\n        alert('Potential attack detected. Data will not be saved.');\n        setStatus('');\n        return;\n      }\n      setStatus('Saving data to the blockchain...');\n\n      // Store provider in state and local variable\n      localProvider = new ethers.BrowserProvider(window.ethereum);\n      setProvider(localProvider);\n      const signer = await localProvider.getSigner();\n      const contract = new ethers.Contract(contractAddress, UserDataStorageAbi.abi, signer);\n      try {\n        console.log('Attempting to save data:', {\n          name,\n          userAddress,\n          location\n        });\n\n        // Get the signer's address and verify it matches MetaMask\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (!accounts || accounts.length === 0) {\n          throw new Error('No authorized accounts found. Please connect MetaMask.');\n        }\n        const from = await signer.getAddress();\n        console.log('Signer address:', from);\n        console.log('Connected MetaMask account:', accounts[0]);\n\n        // Verify the addresses match\n        if (from.toLowerCase() !== accounts[0].toLowerCase()) {\n          throw new Error('Signer address does not match connected MetaMask account.');\n        }\n\n        // Use a fixed gas limit that we know works\n        const gasLimit = BigInt(300000);\n        console.log('Using fixed gas limit:', gasLimit.toString());\n\n        // Get current network gas price\n        const feeData = await localProvider.getFeeData();\n        console.log('Current gas price:', feeData.gasPrice.toString());\n\n        // Send transaction with explicit parameters\n        const tx = await contract.saveUserData(name, userAddress, location, {\n          from: from,\n          gasLimit: gasLimit,\n          gasPrice: feeData.gasPrice\n        });\n        console.log('Transaction hash:', tx.hash);\n        setStatus('Transaction sent, waiting for confirmation...');\n\n        // Wait for the transaction to be mined\n        const receipt = await tx.wait(1); // Wait for 1 confirmation\n        console.log('Transaction receipt:', receipt);\n        if (receipt.status === 1) {\n          alert('Data saved successfully to the blockchain!');\n          setStatus('Data saved successfully!');\n\n          // Clear form after successful save\n          setName('');\n          setUserAddress('');\n          setLocation('');\n        } else {\n          throw new Error('Transaction failed');\n        }\n      } catch (txError) {\n        var _txError$message, _txError$message2;\n        console.error('Transaction error:', txError);\n\n        // Check if the data was actually saved despite the RPC error\n        try {\n          const events = await contract.queryFilter('UserDataSaved');\n          const lastEvent = events[events.length - 1];\n          if (lastEvent && lastEvent.args) {\n            // Data was saved successfully despite the RPC error\n            alert('Data was saved successfully despite the error message.');\n            setStatus('Data saved successfully!');\n\n            // Clear form\n            setName('');\n            setUserAddress('');\n            setLocation('');\n            return;\n          }\n        } catch (checkError) {\n          console.error('Error checking transaction status:', checkError);\n        }\n\n        // If we couldn't confirm the save, show the error\n        let errorMessage = 'Transaction failed: ';\n        if (txError.code === 'UNPREDICTABLE_GAS_LIMIT') {\n          errorMessage += 'Could not estimate gas. Using fixed gas limit.';\n        } else if (txError.code === 'INSUFFICIENT_FUNDS') {\n          errorMessage += 'Not enough ETH to pay for gas. Please check your wallet balance.';\n        } else if (txError.code === 'CALL_EXCEPTION') {\n          errorMessage += 'Contract call reverted. Please check your input values.';\n        } else if ((_txError$message = txError.message) !== null && _txError$message !== void 0 && _txError$message.includes('user rejected')) {\n          errorMessage += 'Transaction was rejected by user.';\n        } else if ((_txError$message2 = txError.message) !== null && _txError$message2 !== void 0 && _txError$message2.includes('address')) {\n          errorMessage += 'Invalid address. Please check MetaMask connection.';\n        } else if (txError.data) {\n          errorMessage += txError.data.message || txError.message;\n        } else {\n          errorMessage += txError.message;\n        }\n        alert(errorMessage);\n        setStatus('Transaction failed. Please try again.');\n      }\n    } catch (error) {\n      var _error$message;\n      console.error('Error:', error);\n      if (error.code === 4001) {\n        // User rejected the transaction\n        alert('Transaction was rejected by the user.');\n      } else if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('user rejected')) {\n        alert('Transaction was rejected by the user.');\n      } else {\n        alert('Error saving data: ' + error.message);\n      }\n      setStatus('');\n    } finally {\n      if (localProvider) {\n        try {\n          await localProvider.removeAllListeners();\n        } catch (cleanupError) {\n          console.log('Cleanup error:', cleanupError);\n        }\n      }\n      setProvider(null);\n    }\n  }\n  async function checkTransaction(txData) {\n    try {\n      const response = await fetch('/api/analyze-transaction', {\n        method: 'POST',\n        body: JSON.stringify(txData)\n      });\n      const analysis = await response.json();\n      if (analysis.is_suspicious) {\n        displayWarning({\n          riskLevel: analysis.risk_level,\n          score: analysis.risk_score,\n          details: analysis.risk_factors\n        });\n      }\n    } catch (error) {\n      console.error('Error analyzing transaction:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.formContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.title,\n      children: \"Save User Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter your details to save them to the blockchain.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.inputGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: styles.label,\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        placeholder: \"Enter your name\",\n        style: styles.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.inputGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: styles.label,\n        children: \"Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userAddress,\n        onChange: e => setUserAddress(e.target.value),\n        placeholder: \"Enter your address\",\n        style: styles.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.inputGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: styles.label,\n        children: \"Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: location,\n        onChange: e => setLocation(e.target.value),\n        placeholder: \"Enter your location\",\n        style: styles.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveDataToBlockchain,\n      style: styles.button,\n      children: \"Save Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.status,\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n}\n_s(SaveUserData, \"TXHrh7/kX3a4bdJQuxihd74sLx4=\");\n_c = SaveUserData;\nconst styles = {\n  formContainer: {\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n    backgroundColor: '#fff'\n  },\n  title: {\n    fontSize: '24px',\n    marginBottom: '10px',\n    color: '#333'\n  },\n  inputGroup: {\n    marginBottom: '10px'\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold'\n  },\n  input: {\n    width: '100%',\n    padding: '8px',\n    borderRadius: '4px',\n    border: '1px solid #ccc'\n  },\n  button: {\n    padding: '10px 15px',\n    backgroundColor: '#007bff',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '4px',\n    cursor: 'pointer'\n  },\n  status: {\n    marginTop: '15px',\n    color: '#555'\n  }\n};\nexport default SaveUserData;\nvar _c;\n$RefreshReg$(_c, \"SaveUserData\");","map":{"version":3,"names":["React","useState","ethers","UserDataStorageAbi","jsxDEV","_jsxDEV","SaveUserData","_s","name","setName","userAddress","setUserAddress","location","setLocation","status","setStatus","provider","setProvider","contractAddress","saveDataToBlockchain","localProvider","log","window","ethereum","alert","request","method","error","response","fetch","headers","body","JSON","stringify","data","address","result","json","ok","errorMessage","attack_type","field","reason","suggestions","join","risk_level","console","prediction","toLowerCase","BrowserProvider","signer","getSigner","contract","Contract","abi","accounts","length","Error","from","getAddress","gasLimit","BigInt","toString","feeData","getFeeData","gasPrice","tx","saveUserData","hash","receipt","wait","txError","_txError$message","_txError$message2","events","queryFilter","lastEvent","args","checkError","code","message","includes","_error$message","removeAllListeners","cleanupError","checkTransaction","txData","analysis","is_suspicious","displayWarning","riskLevel","score","risk_score","details","risk_factors","style","styles","formContainer","children","title","fileName","_jsxFileName","lineNumber","columnNumber","inputGroup","label","type","value","onChange","e","target","placeholder","input","onClick","button","_c","padding","borderRadius","boxShadow","backgroundColor","fontSize","marginBottom","color","display","fontWeight","width","border","cursor","marginTop","$RefreshReg$"],"sources":["/Users/amrnazeh/Documents/unvierstiy /Final_year/final/my-web3-ai-app/client/src/pages/SaveUserData.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport UserDataStorageAbi from '../abis/UserDataStorage.json';\n\nfunction SaveUserData() {\n  const [name, setName] = useState('');\n  const [userAddress, setUserAddress] = useState('');\n  const [location, setLocation] = useState('');\n  const [status, setStatus] = useState('');\n  const [provider, setProvider] = useState(null);\n\n  const contractAddress = '0x4a8958c6D1fdf3681A4f527Da19B5EFF7Cd79691';\n\n  async function saveDataToBlockchain() {\n    let localProvider = null;\n    const log = `Name: ${name}, Address: ${userAddress}, Location: ${location}`;\n    setStatus('Analyzing data with AI...');\n\n    try {\n      // First check if MetaMask is installed and connected\n      if (!window.ethereum) {\n        alert('Please install MetaMask to use this feature!');\n        setStatus('');\n        return;\n      }\n\n      // Request account access if needed\n      try {\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n      } catch (error) {\n        alert('Please connect your MetaMask wallet!');\n        setStatus('');\n        return;\n      }\n\n      const response = await fetch('http://localhost:5002/predict', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          data: log,\n          name: name,\n          address: userAddress,\n          location: location,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        let errorMessage = 'Error analyzing data.';\n        if (result.attack_type === 'XSS') {\n          errorMessage = `Security risk detected in ${result.field}: ${result.reason}\\n\\nSuggestions:\\n${result.suggestions.join('\\n')}`;\n        } else if (result.attack_type === 'Blockchain Anomaly') {\n          errorMessage = `Suspicious transaction pattern detected (Risk Level: ${result.risk_level})`;\n        }\n        alert(errorMessage);\n        setStatus('');\n        return;\n      }\n\n      console.log('AI Prediction:', result);\n\n      if (result.prediction.toLowerCase() === 'attack') {\n        alert('Potential attack detected. Data will not be saved.');\n        setStatus('');\n        return;\n      }\n\n      setStatus('Saving data to the blockchain...');\n\n      // Store provider in state and local variable\n      localProvider = new ethers.BrowserProvider(window.ethereum);\n      setProvider(localProvider);\n\n      const signer = await localProvider.getSigner();\n      const contract = new ethers.Contract(contractAddress, UserDataStorageAbi.abi, signer);\n\n      try {\n        console.log('Attempting to save data:', { name, userAddress, location });\n        \n        // Get the signer's address and verify it matches MetaMask\n        const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n        if (!accounts || accounts.length === 0) {\n          throw new Error('No authorized accounts found. Please connect MetaMask.');\n        }\n        \n        const from = await signer.getAddress();\n        console.log('Signer address:', from);\n        console.log('Connected MetaMask account:', accounts[0]);\n        \n        // Verify the addresses match\n        if (from.toLowerCase() !== accounts[0].toLowerCase()) {\n          throw new Error('Signer address does not match connected MetaMask account.');\n        }\n\n        // Use a fixed gas limit that we know works\n        const gasLimit = BigInt(300000);\n        console.log('Using fixed gas limit:', gasLimit.toString());\n\n        // Get current network gas price\n        const feeData = await localProvider.getFeeData();\n        console.log('Current gas price:', feeData.gasPrice.toString());\n\n        // Send transaction with explicit parameters\n        const tx = await contract.saveUserData(name, userAddress, location, {\n          from: from,\n          gasLimit: gasLimit,\n          gasPrice: feeData.gasPrice\n        });\n\n        console.log('Transaction hash:', tx.hash);\n        setStatus('Transaction sent, waiting for confirmation...');\n\n        // Wait for the transaction to be mined\n        const receipt = await tx.wait(1); // Wait for 1 confirmation\n        console.log('Transaction receipt:', receipt);\n\n        if (receipt.status === 1) {\n          alert('Data saved successfully to the blockchain!');\n          setStatus('Data saved successfully!');\n\n          // Clear form after successful save\n          setName('');\n          setUserAddress('');\n          setLocation('');\n        } else {\n          throw new Error('Transaction failed');\n        }\n      } catch (txError) {\n        console.error('Transaction error:', txError);\n        \n        // Check if the data was actually saved despite the RPC error\n        try {\n          const events = await contract.queryFilter('UserDataSaved');\n          const lastEvent = events[events.length - 1];\n          \n          if (lastEvent && lastEvent.args) {\n            // Data was saved successfully despite the RPC error\n            alert('Data was saved successfully despite the error message.');\n            setStatus('Data saved successfully!');\n            \n            // Clear form\n            setName('');\n            setUserAddress('');\n            setLocation('');\n            return;\n          }\n        } catch (checkError) {\n          console.error('Error checking transaction status:', checkError);\n        }\n\n        // If we couldn't confirm the save, show the error\n        let errorMessage = 'Transaction failed: ';\n        \n        if (txError.code === 'UNPREDICTABLE_GAS_LIMIT') {\n          errorMessage += 'Could not estimate gas. Using fixed gas limit.';\n        } else if (txError.code === 'INSUFFICIENT_FUNDS') {\n          errorMessage += 'Not enough ETH to pay for gas. Please check your wallet balance.';\n        } else if (txError.code === 'CALL_EXCEPTION') {\n          errorMessage += 'Contract call reverted. Please check your input values.';\n        } else if (txError.message?.includes('user rejected')) {\n          errorMessage += 'Transaction was rejected by user.';\n        } else if (txError.message?.includes('address')) {\n          errorMessage += 'Invalid address. Please check MetaMask connection.';\n        } else if (txError.data) {\n          errorMessage += txError.data.message || txError.message;\n        } else {\n          errorMessage += txError.message;\n        }\n        \n        alert(errorMessage);\n        setStatus('Transaction failed. Please try again.');\n      }\n\n    } catch (error) {\n      console.error('Error:', error);\n      if (error.code === 4001) {\n        // User rejected the transaction\n        alert('Transaction was rejected by the user.');\n      } else if (error.message?.includes('user rejected')) {\n        alert('Transaction was rejected by the user.');\n      } else {\n        alert('Error saving data: ' + error.message);\n      }\n      setStatus('');\n    } finally {\n      if (localProvider) {\n        try {\n          await localProvider.removeAllListeners();\n        } catch (cleanupError) {\n          console.log('Cleanup error:', cleanupError);\n        }\n      }\n      setProvider(null);\n    }\n  }\n\n  async function checkTransaction(txData) {\n    try {\n      const response = await fetch('/api/analyze-transaction', {\n        method: 'POST',\n        body: JSON.stringify(txData)\n      });\n      \n      const analysis = await response.json();\n      \n      if (analysis.is_suspicious) {\n        displayWarning({\n          riskLevel: analysis.risk_level,\n          score: analysis.risk_score,\n          details: analysis.risk_factors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Error analyzing transaction:', error);\n    }\n  }\n\n  return (\n    <div style={styles.formContainer}>\n      <h2 style={styles.title}>Save User Data</h2>\n      <p>Enter your details to save them to the blockchain.</p>\n      <div style={styles.inputGroup}>\n        <label style={styles.label}>Name</label>\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"Enter your name\"\n          style={styles.input}\n        />\n      </div>\n      <div style={styles.inputGroup}>\n        <label style={styles.label}>Address</label>\n        <input\n          type=\"text\"\n          value={userAddress}\n          onChange={(e) => setUserAddress(e.target.value)}\n          placeholder=\"Enter your address\"\n          style={styles.input}\n        />\n      </div>\n      <div style={styles.inputGroup}>\n        <label style={styles.label}>Location</label>\n        <input\n          type=\"text\"\n          value={location}\n          onChange={(e) => setLocation(e.target.value)}\n          placeholder=\"Enter your location\"\n          style={styles.input}\n        />\n      </div>\n      <button onClick={saveDataToBlockchain} style={styles.button}>\n        Save Data\n      </button>\n      {status && <p style={styles.status}>{status}</p>}\n    </div>\n  );\n}\n\nconst styles = {\n  formContainer: {\n    padding: '20px',\n    borderRadius: '8px',\n    boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n    backgroundColor: '#fff',\n  },\n  title: {\n    fontSize: '24px',\n    marginBottom: '10px',\n    color: '#333',\n  },\n  inputGroup: {\n    marginBottom: '10px',\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold',\n  },\n  input: {\n    width: '100%',\n    padding: '8px',\n    borderRadius: '4px',\n    border: '1px solid #ccc',\n  },\n  button: {\n    padding: '10px 15px',\n    backgroundColor: '#007bff',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '4px',\n    cursor: 'pointer',\n  },\n  status: {\n    marginTop: '15px',\n    color: '#555',\n  },\n};\n\nexport default SaveUserData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}