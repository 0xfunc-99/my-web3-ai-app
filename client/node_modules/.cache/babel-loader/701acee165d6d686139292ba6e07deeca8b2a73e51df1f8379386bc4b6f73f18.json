{"ast":null,"code":"var _jsxFileName = \"/Users/amrnazeh/Documents/unvierstiy /Final_year/final/my-web3-ai-app/client/src/pages/FetchUserData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport UserDataStorageAbi from '../abis/UserDataStorage.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FetchUserData() {\n  _s();\n  const [userAddress, setUserAddress] = useState('');\n  const [userData, setUserData] = useState(null);\n  const [status, setStatus] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [account, setAccount] = useState('');\n\n  // Update contract address to match current deployment\n  const contractAddress = '0x7635615a00cbC897Bd020468C4338B194C8CC948';\n\n  // Check if wallet is connected on component mount\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    checkNetwork();\n    // Add listener for account changes\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', () => window.location.reload());\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    };\n  }, []);\n  const handleAccountsChanged = accounts => {\n    if (accounts.length > 0) {\n      setAccount(accounts[0]);\n      setIsConnected(true);\n    } else {\n      setAccount('');\n      setIsConnected(false);\n    }\n  };\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (!window.ethereum) {\n        setStatus('Please install MetaMask!');\n        return;\n      }\n      const accounts = await window.ethereum.request({\n        method: 'eth_accounts'\n      });\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n        setIsConnected(true);\n      }\n    } catch (error) {\n      console.error('Error checking wallet connection:', error);\n    }\n  };\n  const connectWallet = async () => {\n    try {\n      if (!window.ethereum) {\n        alert('Please install MetaMask!');\n        return;\n      }\n      setStatus('Connecting to MetaMask...');\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setAccount(accounts[0]);\n      setIsConnected(true);\n      setStatus('Wallet connected successfully!');\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      setStatus('Error connecting wallet. Please try again.');\n    }\n  };\n  const checkNetwork = async () => {\n    if (window.ethereum) {\n      const chainId = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n      if (chainId !== '0x539') {\n        // Ganache chainId\n        setStatus('Please connect to Ganache network (Chain ID: 1337)');\n        try {\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{\n              chainId: '0x539'\n            }]\n          });\n        } catch (error) {\n          console.error('Error switching network:', error);\n        }\n      }\n    }\n  };\n  const fetchDataFromBlockchain = async () => {\n    if (!isConnected) {\n      setStatus('Please connect your wallet first!');\n      return;\n    }\n    try {\n      await checkNetwork(); // Ensure correct network before proceeding\n      setStatus('Fetching data...');\n      setUserData(null);\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      console.log('Connected with address:', await signer.getAddress());\n\n      // Create contract instance\n      const contract = new ethers.Contract(contractAddress, UserDataStorageAbi, signer);\n      console.log('Fetching data for address:', userAddress);\n      let data;\n      if (userAddress && userAddress.trim() !== '') {\n        // If an address is provided, use getUserDataByAddress\n        console.log('Fetching data for specific address:', userAddress);\n        data = await contract.getUserDataByAddress(userAddress);\n      } else {\n        // Otherwise, get all user data\n        console.log('Fetching all user data');\n        data = await contract.getUserData();\n      }\n      console.log('Raw data received:', data);\n\n      // Check if data exists and has length property\n      if (!data || !Array.isArray(data) || data.length === 0) {\n        setStatus('No data found in the contract.');\n        setUserData([]);\n        return;\n      }\n\n      // Format the data - handle both array and single result cases\n      const formattedData = data.map(entry => {\n        // Ensure we're accessing the correct properties\n        return {\n          name: entry.name || '',\n          address: entry.userAddress || '',\n          location: entry.location || ''\n        };\n      }).filter(entry => entry.name || entry.address || entry.location); // Filter out empty entries\n\n      console.log('Formatted data:', formattedData);\n      if (formattedData.length === 0) {\n        setStatus('No valid data found in the contract.');\n        setUserData([]);\n        return;\n      }\n      setUserData(formattedData);\n      setStatus('Data fetched successfully!');\n    } catch (error) {\n      console.error('Fetch error:', error);\n      if (error.code === 'CALL_EXCEPTION') {\n        setStatus('Error: Contract call failed. Please verify the contract address and network connection.');\n      } else if (error.code === 'INVALID_ARGUMENT') {\n        setStatus('Error: Invalid Ethereum address format. Please check the address and try again.');\n      } else {\n        setStatus('Error fetching data: ' + (error.message || 'Unknown error'));\n      }\n      setUserData([]); // Clear any previous data on error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.title,\n      children: \"Fetch User Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), !isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.connectContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please connect your wallet to fetch data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        style: styles.connectButton,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.connectedStatus,\n        children: [\"Connected: \", account.slice(0, 6), \"...\", account.slice(-4)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter an Ethereum address to fetch the stored data from the blockchain.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.inputGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.label,\n          children: \"Ethereum Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userAddress,\n          onChange: e => setUserAddress(e.target.value),\n          placeholder: \"Enter Ethereum address\",\n          style: styles.input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchDataFromBlockchain,\n        style: styles.button,\n        children: \"Fetch Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.status,\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 18\n    }, this), userData && userData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.resultContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.resultTitle,\n        children: \"Fetched Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), userData.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.entry,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 18\n          }, this), \" \", entry.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 18\n          }, this), \" \", entry.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Location:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 18\n          }, this), \" \", entry.location]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          style: styles.divider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n_s(FetchUserData, \"DUvBdp1vixh5vGty/qNeXWsy8kI=\");\n_c = FetchUserData;\nconst styles = {\n  container: {\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    padding: '20px',\n    boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n    maxWidth: '600px',\n    margin: 'auto'\n  },\n  title: {\n    fontSize: '24px',\n    marginBottom: '15px',\n    color: '#333'\n  },\n  inputGroup: {\n    marginBottom: '15px'\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold',\n    color: '#555'\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    border: '1px solid #ccc',\n    borderRadius: '5px'\n  },\n  button: {\n    backgroundColor: '#007bff',\n    color: 'white',\n    border: 'none',\n    padding: '10px 15px',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    fontSize: '16px'\n  },\n  status: {\n    marginTop: '15px',\n    color: '#555'\n  },\n  resultContainer: {\n    marginTop: '20px',\n    backgroundColor: '#f9f9f9',\n    borderRadius: '8px',\n    padding: '15px',\n    border: '1px solid #ddd'\n  },\n  resultTitle: {\n    marginBottom: '10px',\n    color: '#333',\n    fontSize: '20px',\n    fontWeight: 'bold'\n  },\n  connectContainer: {\n    textAlign: 'center',\n    marginBottom: '20px'\n  },\n  connectButton: {\n    backgroundColor: '#28a745',\n    color: 'white',\n    border: 'none',\n    padding: '12px 24px',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    fontSize: '16px',\n    marginTop: '10px'\n  },\n  connectedStatus: {\n    color: '#28a745',\n    fontWeight: 'bold',\n    marginBottom: '15px'\n  }\n};\nexport default FetchUserData;\nvar _c;\n$RefreshReg$(_c, \"FetchUserData\");","map":{"version":3,"names":["React","useState","useEffect","ethers","UserDataStorageAbi","jsxDEV","_jsxDEV","Fragment","_Fragment","FetchUserData","_s","userAddress","setUserAddress","userData","setUserData","status","setStatus","isConnected","setIsConnected","account","setAccount","contractAddress","checkIfWalletIsConnected","checkNetwork","window","ethereum","on","handleAccountsChanged","location","reload","removeListener","accounts","length","request","method","error","console","connectWallet","alert","chainId","params","fetchDataFromBlockchain","provider","BrowserProvider","signer","getSigner","log","getAddress","contract","Contract","data","trim","getUserDataByAddress","getUserData","Array","isArray","formattedData","map","entry","name","address","filter","code","message","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","connectContainer","onClick","connectButton","connectedStatus","slice","inputGroup","label","type","value","onChange","e","target","placeholder","input","button","resultContainer","resultTitle","index","divider","_c","backgroundColor","borderRadius","padding","boxShadow","maxWidth","margin","fontSize","marginBottom","color","display","fontWeight","width","border","cursor","marginTop","textAlign","$RefreshReg$"],"sources":["/Users/amrnazeh/Documents/unvierstiy /Final_year/final/my-web3-ai-app/client/src/pages/FetchUserData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport UserDataStorageAbi from '../abis/UserDataStorage.json';\n\nfunction FetchUserData() {\n  const [userAddress, setUserAddress] = useState('');\n  const [userData, setUserData] = useState(null);\n  const [status, setStatus] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [account, setAccount] = useState('');\n\n  // Update contract address to match current deployment\n  const contractAddress = '0x7635615a00cbC897Bd020468C4338B194C8CC948';\n\n  // Check if wallet is connected on component mount\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    checkNetwork();\n    // Add listener for account changes\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', () => window.location.reload());\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    };\n  }, []);\n\n  const handleAccountsChanged = (accounts) => {\n    if (accounts.length > 0) {\n      setAccount(accounts[0]);\n      setIsConnected(true);\n    } else {\n      setAccount('');\n      setIsConnected(false);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (!window.ethereum) {\n        setStatus('Please install MetaMask!');\n        return;\n      }\n\n      const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n        setIsConnected(true);\n      }\n    } catch (error) {\n      console.error('Error checking wallet connection:', error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (!window.ethereum) {\n        alert('Please install MetaMask!');\n        return;\n      }\n\n      setStatus('Connecting to MetaMask...');\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      setAccount(accounts[0]);\n      setIsConnected(true);\n      setStatus('Wallet connected successfully!');\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      setStatus('Error connecting wallet. Please try again.');\n    }\n  };\n\n  const checkNetwork = async () => {\n    if (window.ethereum) {\n      const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n      if (chainId !== '0x539') {  // Ganache chainId\n        setStatus('Please connect to Ganache network (Chain ID: 1337)');\n        try {\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: '0x539' }],\n          });\n        } catch (error) {\n          console.error('Error switching network:', error);\n        }\n      }\n    }\n  };\n\n  const fetchDataFromBlockchain = async () => {\n    if (!isConnected) {\n      setStatus('Please connect your wallet first!');\n      return;\n    }\n\n    try {\n      await checkNetwork();  // Ensure correct network before proceeding\n      setStatus('Fetching data...');\n      setUserData(null);\n  \n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      console.log('Connected with address:', await signer.getAddress());\n      \n      // Create contract instance\n      const contract = new ethers.Contract(\n        contractAddress,\n        UserDataStorageAbi,\n        signer\n      );\n  \n      console.log('Fetching data for address:', userAddress);\n      \n      let data;\n      if (userAddress && userAddress.trim() !== '') {\n        // If an address is provided, use getUserDataByAddress\n        console.log('Fetching data for specific address:', userAddress);\n        data = await contract.getUserDataByAddress(userAddress);\n      } else {\n        // Otherwise, get all user data\n        console.log('Fetching all user data');\n        data = await contract.getUserData();\n      }\n      \n      console.log('Raw data received:', data);\n  \n      // Check if data exists and has length property\n      if (!data || !Array.isArray(data) || data.length === 0) {\n        setStatus('No data found in the contract.');\n        setUserData([]);\n        return;\n      }\n\n      // Format the data - handle both array and single result cases\n      const formattedData = data.map((entry) => {\n        // Ensure we're accessing the correct properties\n        return {\n          name: entry.name || '',\n          address: entry.userAddress || '',\n          location: entry.location || ''\n        };\n      }).filter(entry => entry.name || entry.address || entry.location); // Filter out empty entries\n  \n      console.log('Formatted data:', formattedData);\n  \n      if (formattedData.length === 0) {\n        setStatus('No valid data found in the contract.');\n        setUserData([]);\n        return;\n      }\n\n      setUserData(formattedData);\n      setStatus('Data fetched successfully!');\n      \n    } catch (error) {\n      console.error('Fetch error:', error);\n      if (error.code === 'CALL_EXCEPTION') {\n        setStatus('Error: Contract call failed. Please verify the contract address and network connection.');\n      } else if (error.code === 'INVALID_ARGUMENT') {\n        setStatus('Error: Invalid Ethereum address format. Please check the address and try again.');\n      } else {\n        setStatus('Error fetching data: ' + (error.message || 'Unknown error'));\n      }\n      setUserData([]); // Clear any previous data on error\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      <h2 style={styles.title}>Fetch User Data</h2>\n      \n      {!isConnected ? (\n        <div style={styles.connectContainer}>\n          <p>Please connect your wallet to fetch data.</p>\n          <button onClick={connectWallet} style={styles.connectButton}>\n            Connect Wallet\n          </button>\n        </div>\n      ) : (\n        <>\n          <p style={styles.connectedStatus}>\n            Connected: {account.slice(0, 6)}...{account.slice(-4)}\n          </p>\n          <p>Enter an Ethereum address to fetch the stored data from the blockchain.</p>\n          <div style={styles.inputGroup}>\n            <label style={styles.label}>Ethereum Address</label>\n            <input\n              type=\"text\"\n              value={userAddress}\n              onChange={(e) => setUserAddress(e.target.value)}\n              placeholder=\"Enter Ethereum address\"\n              style={styles.input}\n            />\n          </div>\n          <button onClick={fetchDataFromBlockchain} style={styles.button}>\n            Fetch Data\n          </button>\n        </>\n      )}\n      \n      {status && <p style={styles.status}>{status}</p>}\n      \n      {userData && userData.length > 0 && (\n        <div style={styles.resultContainer}>\n          <h3 style={styles.resultTitle}>Fetched Data:</h3>\n          {userData.map((entry, index) => (\n            <div key={index} style={styles.entry}>\n              <p><strong>Name:</strong> {entry.name}</p>\n              <p><strong>Address:</strong> {entry.address}</p>\n              <p><strong>Location:</strong> {entry.location}</p>\n              <hr style={styles.divider} />\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    padding: '20px',\n    boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n    maxWidth: '600px',\n    margin: 'auto',\n  },\n  title: {\n    fontSize: '24px',\n    marginBottom: '15px',\n    color: '#333',\n  },\n  inputGroup: {\n    marginBottom: '15px',\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold',\n    color: '#555',\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n  },\n  button: {\n    backgroundColor: '#007bff',\n    color: 'white',\n    border: 'none',\n    padding: '10px 15px',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    fontSize: '16px',\n  },\n  status: {\n    marginTop: '15px',\n    color: '#555',\n  },\n  resultContainer: {\n    marginTop: '20px',\n    backgroundColor: '#f9f9f9',\n    borderRadius: '8px',\n    padding: '15px',\n    border: '1px solid #ddd',\n  },\n  resultTitle: {\n    marginBottom: '10px',\n    color: '#333',\n    fontSize: '20px',\n    fontWeight: 'bold',\n  },\n  connectContainer: {\n    textAlign: 'center',\n    marginBottom: '20px',\n  },\n  connectButton: {\n    backgroundColor: '#28a745',\n    color: 'white',\n    border: 'none',\n    padding: '12px 24px',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    fontSize: '16px',\n    marginTop: '10px',\n  },\n  connectedStatus: {\n    color: '#28a745',\n    fontWeight: 'bold',\n    marginBottom: '15px',\n  },\n};\n\nexport default FetchUserData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}