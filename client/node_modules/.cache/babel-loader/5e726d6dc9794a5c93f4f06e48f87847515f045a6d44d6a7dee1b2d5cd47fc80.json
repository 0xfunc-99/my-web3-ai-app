{"ast":null,"code":"var _jsxFileName = \"/Users/amrnazeh/Documents/unvierstiy /Final_year/final/my-web3-ai-app/client/src/pages/FetchUserData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport UserDataStorageAbi from '../abis/UserDataStorage.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FetchUserData() {\n  _s();\n  const [userAddress, setUserAddress] = useState('');\n  const [userData, setUserData] = useState(null);\n  const [status, setStatus] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [account, setAccount] = useState('');\n  const contractAddress = '0xcA49D51c4a86CebCB2E2d3f9308e2133Ee54D44D';\n\n  // Check if already connected\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (!window.ethereum) {\n        setStatus('Please install MetaMask!');\n        return;\n      }\n      const accounts = await window.ethereum.request({\n        method: 'eth_accounts'\n      });\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n        setIsConnected(true);\n        setStatus('Wallet is connected!');\n      }\n    } catch (error) {\n      console.error('Error checking wallet connection:', error);\n      setStatus('Error checking wallet connection.');\n    }\n  };\n  const connectWallet = async () => {\n    try {\n      if (!window.ethereum) {\n        alert('Please install MetaMask!');\n        return;\n      }\n      setStatus('Connecting to MetaMask...');\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setAccount(accounts[0]);\n      setIsConnected(true);\n      setStatus('Wallet connected successfully!');\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      setStatus('Error connecting wallet. Please try again.');\n    }\n  };\n  const fetchDataFromBlockchain = async () => {\n    if (!window.ethereum) {\n      alert('Please install MetaMask!');\n      return;\n    }\n    if (!isConnected) {\n      alert('Please connect your wallet first!');\n      return;\n    }\n    try {\n      setStatus('Fetching data...');\n      setUserData(null); // Clear previous data\n\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n\n      // Create contract instance\n      const contract = new ethers.Contract(contractAddress, UserDataStorageAbi, signer);\n      console.log('Fetching data for address:', userAddress);\n      let data;\n      if (userAddress && userAddress.trim() !== '') {\n        // If an address is provided, use getUserDataByAddress\n        data = await contract.getUserDataByAddress(userAddress);\n      } else {\n        // Otherwise, get all user data\n        data = await contract.getUserData();\n      }\n      console.log('Raw data received:', data);\n\n      // Parse and display all data entries\n      const formattedData = data.map(entry => ({\n        name: entry.name,\n        address: entry.userAddress,\n        location: entry.location\n      }));\n      console.log('Formatted data:', formattedData);\n      if (formattedData.length === 0) {\n        setStatus('No data found for this address.');\n        return;\n      }\n      setUserData(formattedData);\n      setStatus('Data fetched successfully!');\n    } catch (error) {\n      console.error('Fetch error:', error);\n      if (error.code === 'CALL_EXCEPTION') {\n        setStatus('Error: Contract call failed. Make sure you are connected to the correct network.');\n      } else if (error.code === 'INVALID_ARGUMENT') {\n        setStatus('Error: Invalid Ethereum address format.');\n      } else {\n        setStatus('Error fetching data: ' + (error.message || 'Unknown error'));\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.title,\n      children: \"Fetch User Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), !isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.connectContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please connect your MetaMask wallet to continue.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        style: styles.connectButton,\n        children: \"Connect MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Account: \", account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter an Ethereum address to fetch the stored data from the blockchain.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.inputGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.label,\n          children: \"Ethereum Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userAddress,\n          onChange: e => setUserAddress(e.target.value),\n          placeholder: \"Enter Ethereum address\",\n          style: styles.input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchDataFromBlockchain,\n        style: styles.button,\n        children: \"Fetch Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.status,\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 18\n    }, this), userData && userData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.resultContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.resultTitle,\n        children: \"Fetched Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), userData.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.entry,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 18\n          }, this), \" \", entry.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 18\n          }, this), \" \", entry.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Location:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 18\n          }, this), \" \", entry.location]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          style: styles.divider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(FetchUserData, \"DUvBdp1vixh5vGty/qNeXWsy8kI=\");\n_c = FetchUserData;\nconst styles = {\n  container: {\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    padding: '20px',\n    boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n    maxWidth: '600px',\n    margin: 'auto'\n  },\n  connectContainer: {\n    textAlign: 'center',\n    marginBottom: '20px'\n  },\n  connectButton: {\n    backgroundColor: '#28a745',\n    color: 'white',\n    border: 'none',\n    padding: '12px 20px',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    fontSize: '16px',\n    marginTop: '10px'\n  },\n  title: {\n    fontSize: '24px',\n    marginBottom: '15px',\n    color: '#333'\n  },\n  inputGroup: {\n    marginBottom: '15px'\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold',\n    color: '#555'\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    border: '1px solid #ccc',\n    borderRadius: '5px'\n  },\n  button: {\n    backgroundColor: '#007bff',\n    color: 'white',\n    border: 'none',\n    padding: '10px 15px',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    fontSize: '16px'\n  },\n  status: {\n    marginTop: '15px',\n    color: '#555'\n  },\n  resultContainer: {\n    marginTop: '20px',\n    backgroundColor: '#f9f9f9',\n    borderRadius: '8px',\n    padding: '15px',\n    border: '1px solid #ddd'\n  },\n  resultTitle: {\n    marginBottom: '10px',\n    color: '#333',\n    fontSize: '20px',\n    fontWeight: 'bold'\n  }\n};\nexport default FetchUserData;\nvar _c;\n$RefreshReg$(_c, \"FetchUserData\");","map":{"version":3,"names":["React","useState","useEffect","ethers","UserDataStorageAbi","jsxDEV","_jsxDEV","Fragment","_Fragment","FetchUserData","_s","userAddress","setUserAddress","userData","setUserData","status","setStatus","isConnected","setIsConnected","account","setAccount","contractAddress","checkIfWalletIsConnected","window","ethereum","accounts","request","method","length","error","console","connectWallet","alert","fetchDataFromBlockchain","provider","BrowserProvider","signer","getSigner","contract","Contract","log","data","trim","getUserDataByAddress","getUserData","formattedData","map","entry","name","address","location","code","message","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","connectContainer","onClick","connectButton","inputGroup","label","type","value","onChange","e","target","placeholder","input","button","resultContainer","resultTitle","index","divider","_c","backgroundColor","borderRadius","padding","boxShadow","maxWidth","margin","textAlign","marginBottom","color","border","cursor","fontSize","marginTop","display","fontWeight","width","$RefreshReg$"],"sources":["/Users/amrnazeh/Documents/unvierstiy /Final_year/final/my-web3-ai-app/client/src/pages/FetchUserData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport UserDataStorageAbi from '../abis/UserDataStorage.json';\n\nfunction FetchUserData() {\n  const [userAddress, setUserAddress] = useState('');\n  const [userData, setUserData] = useState(null);\n  const [status, setStatus] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [account, setAccount] = useState('');\n\n  const contractAddress = '0xcA49D51c4a86CebCB2E2d3f9308e2133Ee54D44D';\n\n  // Check if already connected\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (!window.ethereum) {\n        setStatus('Please install MetaMask!');\n        return;\n      }\n\n      const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n        setIsConnected(true);\n        setStatus('Wallet is connected!');\n      }\n    } catch (error) {\n      console.error('Error checking wallet connection:', error);\n      setStatus('Error checking wallet connection.');\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (!window.ethereum) {\n        alert('Please install MetaMask!');\n        return;\n      }\n\n      setStatus('Connecting to MetaMask...');\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      setAccount(accounts[0]);\n      setIsConnected(true);\n      setStatus('Wallet connected successfully!');\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      setStatus('Error connecting wallet. Please try again.');\n    }\n  };\n\n  const fetchDataFromBlockchain = async () => {\n    if (!window.ethereum) {\n      alert('Please install MetaMask!');\n      return;\n    }\n\n    if (!isConnected) {\n      alert('Please connect your wallet first!');\n      return;\n    }\n  \n    try {\n      setStatus('Fetching data...');\n      setUserData(null); // Clear previous data\n  \n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      \n      // Create contract instance\n      const contract = new ethers.Contract(\n        contractAddress,\n        UserDataStorageAbi,\n        signer\n      );\n  \n      console.log('Fetching data for address:', userAddress);\n      \n      let data;\n      if (userAddress && userAddress.trim() !== '') {\n        // If an address is provided, use getUserDataByAddress\n        data = await contract.getUserDataByAddress(userAddress);\n      } else {\n        // Otherwise, get all user data\n        data = await contract.getUserData();\n      }\n      \n      console.log('Raw data received:', data);\n  \n      // Parse and display all data entries\n      const formattedData = data.map((entry) => ({\n        name: entry.name,\n        address: entry.userAddress,\n        location: entry.location,\n      }));\n  \n      console.log('Formatted data:', formattedData);\n  \n      if (formattedData.length === 0) {\n        setStatus('No data found for this address.');\n        return;\n      }\n  \n      setUserData(formattedData);\n      setStatus('Data fetched successfully!');\n    } catch (error) {\n      console.error('Fetch error:', error);\n      if (error.code === 'CALL_EXCEPTION') {\n        setStatus('Error: Contract call failed. Make sure you are connected to the correct network.');\n      } else if (error.code === 'INVALID_ARGUMENT') {\n        setStatus('Error: Invalid Ethereum address format.');\n      } else {\n        setStatus('Error fetching data: ' + (error.message || 'Unknown error'));\n      }\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      <h2 style={styles.title}>Fetch User Data</h2>\n      \n      {!isConnected ? (\n        <div style={styles.connectContainer}>\n          <p>Please connect your MetaMask wallet to continue.</p>\n          <button onClick={connectWallet} style={styles.connectButton}>\n            Connect MetaMask\n          </button>\n        </div>\n      ) : (\n        <>\n          <p>Connected Account: {account}</p>\n          <p>Enter an Ethereum address to fetch the stored data from the blockchain.</p>\n          <div style={styles.inputGroup}>\n            <label style={styles.label}>Ethereum Address</label>\n            <input\n              type=\"text\"\n              value={userAddress}\n              onChange={(e) => setUserAddress(e.target.value)}\n              placeholder=\"Enter Ethereum address\"\n              style={styles.input}\n            />\n          </div>\n          <button onClick={fetchDataFromBlockchain} style={styles.button}>\n            Fetch Data\n          </button>\n        </>\n      )}\n      \n      {status && <p style={styles.status}>{status}</p>}\n      {userData && userData.length > 0 && (\n        <div style={styles.resultContainer}>\n          <h3 style={styles.resultTitle}>Fetched Data:</h3>\n          {userData.map((entry, index) => (\n            <div key={index} style={styles.entry}>\n              <p><strong>Name:</strong> {entry.name}</p>\n              <p><strong>Address:</strong> {entry.address}</p>\n              <p><strong>Location:</strong> {entry.location}</p>\n              <hr style={styles.divider} />\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    padding: '20px',\n    boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n    maxWidth: '600px',\n    margin: 'auto',\n  },\n  connectContainer: {\n    textAlign: 'center',\n    marginBottom: '20px',\n  },\n  connectButton: {\n    backgroundColor: '#28a745',\n    color: 'white',\n    border: 'none',\n    padding: '12px 20px',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    fontSize: '16px',\n    marginTop: '10px',\n  },\n  title: {\n    fontSize: '24px',\n    marginBottom: '15px',\n    color: '#333',\n  },\n  inputGroup: {\n    marginBottom: '15px',\n  },\n  label: {\n    display: 'block',\n    marginBottom: '5px',\n    fontWeight: 'bold',\n    color: '#555',\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n  },\n  button: {\n    backgroundColor: '#007bff',\n    color: 'white',\n    border: 'none',\n    padding: '10px 15px',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    fontSize: '16px',\n  },\n  status: {\n    marginTop: '15px',\n    color: '#555',\n  },\n  resultContainer: {\n    marginTop: '20px',\n    backgroundColor: '#f9f9f9',\n    borderRadius: '8px',\n    padding: '15px',\n    border: '1px solid #ddd',\n  },\n  resultTitle: {\n    marginBottom: '10px',\n    color: '#333',\n    fontSize: '20px',\n    fontWeight: 'bold',\n  },\n};\n\nexport default FetchUserData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}